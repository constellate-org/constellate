# This code is autogenerated by Constellate, and changes made here will not persist.
#constellate: setup_panel
import numpy as np
from scipy import stats
import bokeh
import param
import panel as pn
import matplotlib.pyplot as plt

pn.extension('katex')

# here's the setup cell I'm using, for clarity:

# #constellate: setup_panel
# import numpy as np
# from scipy import stats
# import bokeh
# import param
# import panel as pn
# import matplotlib.pyplot as plt
# pn.extension('katex')


class BetaDist(param.Parameterized):
    colorMode = param.ObjectSelector(["dark", "light"], precedence=-1)
    mu = param.Number(label='μ', default=0.3, bounds=(0, 1), step=0.01)
    nu = param.Number(label='ν', default=10, bounds=(1, 100), step=1)

    def __init__(self):
        super().__init__()
        if 'colorMode' in pn.state.session_args:
            self.colorMode = pn.state.session_args["colorMode"][0].decode(
            ).lower()
        else:
            self.colorMode = 'dark'

    @pn.depends("colorMode")
    def colors_theme(self):
        if self.colorMode == "light":
            plt.style.use("rho-light")
        else:
            plt.style.use("rho-dark")
        colors = plt.rcParams["axes.prop_cycle"].by_key()["color"]
        theme = bokeh.themes.Theme(
            f"/home/nicholas/programs/rho-themes/themes/panel/eui/{self.colorMode}.yml"
        )
        return (colors, theme)

    @pn.depends("colorMode", "mu", "nu")
    def plot(self):
        cs, theme = self.colors_theme()
        xx = np.linspace(0, 1, 100)
        alpha = self.mu * self.nu
        beta = (1 - self.mu) * self.nu
        yy = stats.beta(alpha, beta).pdf(xx)
        p = bokeh.plotting.figure(x_range=(0, 1),
                                  y_range=(0, max(6, np.nanmax(yy,
                                                               initial=0.1))),
                                  title='Beta Distribution')
        p.line(x=xx, y=yy, color=cs[0], width=4)
        return pn.pane.Bokeh(p, theme=theme, sizing_mode='scale_both')


model = BetaDist()

app = pn.Row(pn.Param(model, name='Beta Distribution'),
             model.plot,
             sizing_mode='scale_both')
app.servable('Beta Distribution')
