# This code is autogenerated by Constellate, and changes made here will not persist.
#constellate: setup

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import rho_plus as rho
import colour
import hsluv

IS_DARK = True
theme, cs = rho.mpl_setup(IS_DARK)
plt.style.use(theme)
sns.palplot(cs)
#constellate: setup_panel

import param
import panel as pn
import bokeh
import matplotlib.colors as mpl_colors
from bokeh.plotting import Figure
import matplotlib.figure as figure

pn.extension()

class ThemedParam(param.Parameterized):
    colorMode = param.ObjectSelector(["dark", "light"], precedence=-1)

    def __init__(self):
        super().__init__()
        if 'colorMode' in pn.state.session_args:
            self.colorMode = pn.state.session_args["colorMode"][0].decode().lower()
        else:
            self.colorMode = 'dark'

    @pn.depends("colorMode")
    def colors_theme(self):
        mpl_theme, colors = rho.mpl_setup(self.colorMode == 'dark')
        plt.style.use(mpl_theme)
        theme = 'dark_minimal' if self.colorMode == 'dark' else 'light_minimal'
        return (colors, mpl_theme, theme)
#constellate: setup
def hex2oklch(hexs):
    with colour.utilities.suppress_warnings(colour_usage_warnings=True):
        lchs = []
        if isinstance(hexs, str):
            hexs = [hexs]
        for hex in hexs:
            L, a, b = colour.convert(hsluv.hex_to_rgb(hex), 'sRGB', 'Oklab')
            h = np.rad2deg(np.arctan2(b, a)) % 360
            c = np.hypot(b, a)
            lchs.append(np.array([L, c, h]))

        return np.array(lchs)

def oklch2hex(oklch):
    with colour.utilities.suppress_warnings(colour_usage_warnings=True):
        return np.array([
            hsluv.rgb_to_hex(np.clip(colour.convert((L, c * np.cos(np.deg2rad(h)), c * np.sin(np.deg2rad(h))), 'Oklab', 'sRGB'), 0, 1))
            for L, c, h in np.array(oklch).reshape(-1, 3)
        ])

def oklch2rgb(oklch):
    with colour.utilities.suppress_warnings(colour_usage_warnings=True):
        return np.array([
            colour.convert((L, c * np.cos(np.deg2rad(h)), c * np.sin(np.deg2rad(h))), 'Oklab', 'sRGB')
            for L, c, h in np.array(oklch).reshape(-1, 3)
        ])

def rgb2oklch(rgb):
    with colour.utilities.suppress_warnings(colour_usage_warnings=True):        
        labs = np.array([
            colour.convert((r, g, b), 'sRGB', 'Oklab')
            for r, g, b in np.array(rgb).reshape(-1, 3)
        ])
        L, a, b = labs.T
        c = np.hypot(a, b)
        h = np.rad2deg(np.arctan2(b, a)) % 360    
        return np.vstack([L, c, h]).T

def hex2oklab(hexs):
    with colour.utilities.suppress_warnings(colour_usage_warnings=True):
        labs = []
        if isinstance(hexs, str):
            hexs = [hexs]
        for hex in hexs:
            L, a, b = colour.convert(hsluv.hex_to_rgb(hex), 'sRGB', 'Oklab')
            labs.append(np.array([L, a, b]))

        return np.array(labs)

def oklab2hex(oklab):
    with colour.utilities.suppress_warnings(colour_usage_warnings=True):
        return np.array([
            hsluv.rgb_to_hex(np.clip(colour.convert(lab, 'Oklab', 'sRGB'), 0, 1))
            for lab in np.array(oklab).reshape(-1, 3)
        ])

def rgb2xyz(rgbs):
    with colour.utilities.suppress_warnings(colour_usage_warnings=True):
        xyzs = []    
        for rgb in np.array(rgbs).reshape(-1, 3):
            x, y, z = colour.convert(rgb, 'sRGB', 'CIE XYZ')
            xyzs.append(np.array([x, y, z]))

        return np.array(xyzs)

class WrightGuild(ThemedParam):
    target = param.Color(default=cs[0])
    r = param.Integer(30, bounds=(0, 255), label='Red')
    g = param.Integer(10, bounds=(0, 255), label='Green')
    b = param.Integer(40, bounds=(0, 255), label='Blue')

    @pn.depends('r', 'g', 'b')
    def rgb(self):
        return mpl_colors.to_hex((self.r / 255, self.g / 255, self.b / 255))

    @pn.depends('target', 'r', 'g', 'b')
    def plot(self):
        colors, mplt, theme = self.colors_theme()
        p: Figure = Figure(background_fill_color=self.target,
                           x_range=(0, 10),
                           y_range=(0, 10),
                           sizing_mode='scale_both')

        p.rect(x=2.5, y=5, width=5, height=10, color=self.target)
        p.rect(x=7.5, y=5, width=5, height=10, color=self.rgb())

        return pn.pane.Bokeh(p, theme=theme, sizing_mode='scale_both')


mod = WrightGuild()
app = pn.Row(mod.plot, mod.param)
app.servable('Color Matching')
