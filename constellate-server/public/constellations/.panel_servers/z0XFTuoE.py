# This code is autogenerated by Constellate, and changes made here will not persist.
#constellate: setup

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import rho_plus as rho
import colour
import hsluv

IS_DARK = True
theme, cs = rho.mpl_setup(IS_DARK)
plt.style.use(theme)
sns.palplot(cs)
#constellate: setup_panel

import param
import panel as pn
import bokeh
import matplotlib.colors as mpl_colors
from bokeh.plotting import Figure
import matplotlib.figure as figure

pn.extension()

class ThemedParam(param.Parameterized):
    colorMode = param.ObjectSelector(["dark", "light"], precedence=-1)

    def __init__(self):
        super().__init__()
        if 'colorMode' in pn.state.session_args:
            self.colorMode = pn.state.session_args["colorMode"][0].decode().lower()
        else:
            self.colorMode = 'dark'

    @pn.depends("colorMode")
    def colors_theme(self):
        mpl_theme, colors = rho.mpl_setup(self.colorMode == 'dark')
        plt.style.use(mpl_theme)
        theme = 'dark_minimal' if self.colorMode == 'dark' else 'light_minimal'
        return (colors, mpl_theme, theme)
#constellate: setup
def hex2oklch(hexs):
    with colour.utilities.suppress_warnings(colour_usage_warnings=True):
        lchs = []
        if isinstance(hexs, str):
            hexs = [hexs]
        for hex in hexs:
            L, a, b = colour.convert(hsluv.hex_to_rgb(hex), 'sRGB', 'Oklab')
            h = np.rad2deg(np.arctan2(b, a)) % 360
            c = np.hypot(b, a)
            lchs.append(np.array([L, c, h]))

        return np.array(lchs)

def oklch2hex(oklch):
    with colour.utilities.suppress_warnings(colour_usage_warnings=True):
        return np.array([
            hsluv.rgb_to_hex(np.clip(colour.convert((L, c * np.cos(np.deg2rad(h)), c * np.sin(np.deg2rad(h))), 'Oklab', 'sRGB'), 0, 1))
            for L, c, h in np.array(oklch).reshape(-1, 3)
        ])

def oklch2rgb(oklch):
    with colour.utilities.suppress_warnings(colour_usage_warnings=True):
        return np.array([
            colour.convert((L, c * np.cos(np.deg2rad(h)), c * np.sin(np.deg2rad(h))), 'Oklab', 'sRGB')
            for L, c, h in np.array(oklch).reshape(-1, 3)
        ])

def rgb2oklch(rgb):
    with colour.utilities.suppress_warnings(colour_usage_warnings=True):        
        labs = np.array([
            colour.convert((r, g, b), 'sRGB', 'Oklab')
            for r, g, b in np.array(rgb).reshape(-1, 3)
        ])
        L, a, b = labs.T
        c = np.hypot(a, b)
        h = np.rad2deg(np.arctan2(b, a)) % 360    
        return np.vstack([L, c, h]).T

def hex2oklab(hexs):
    with colour.utilities.suppress_warnings(colour_usage_warnings=True):
        labs = []
        if isinstance(hexs, str):
            hexs = [hexs]
        for hex in hexs:
            L, a, b = colour.convert(hsluv.hex_to_rgb(hex), 'sRGB', 'Oklab')
            labs.append(np.array([L, a, b]))

        return np.array(labs)

def oklab2hex(oklab):
    with colour.utilities.suppress_warnings(colour_usage_warnings=True):
        return np.array([
            hsluv.rgb_to_hex(np.clip(colour.convert(lab, 'Oklab', 'sRGB'), 0, 1))
            for lab in np.array(oklab).reshape(-1, 3)
        ])

def rgb2xyz(rgbs):
    with colour.utilities.suppress_warnings(colour_usage_warnings=True):
        xyzs = []    
        for rgb in np.array(rgbs).reshape(-1, 3):
            x, y, z = colour.convert(rgb, 'sRGB', 'CIE XYZ')
            xyzs.append(np.array([x, y, z]))

        return np.array(xyzs)

class ChromaSlicer(ThemedParam):
    l = param.Number(0.5, bounds=(0, 1), label='Lightness', step=0.01)

    @pn.depends('l')
    def plot(self):
        cs, mplt, theme = self.colors_theme()
        hh, cc = np.meshgrid(np.linspace(0, 360, 20, endpoint=True),
                             np.linspace(0, 0.37, 20))
        ll = self.l * np.ones_like(hh)

        lchs = np.vstack([ll.flatten(), cc.flatten(), hh.flatten()]).T
        rgbs = oklch2rgb(lchs)
        lchs = lchs.reshape(*hh.shape, 3)
        rgbs = rgbs.reshape(*hh.shape, 3)
        in_gamut = (rgbs.min(axis=-1) >= 0) & (rgbs.max(axis=-1) <= 1)
        rgbs[~in_gamut] = np.broadcast_to(
            mpl_colors.to_rgb(plt.rcParams['axes.facecolor']),
            rgbs[~in_gamut].shape)
        fig = figure.Figure()
        ax = fig.subplots(subplot_kw=dict(projection='polar'))
        ax.grid(False)
        ax.set_yticks([])
        m = ax.pcolormesh(np.deg2rad(np.unique(hh)),
                          np.unique(cc),
                          hh,
                          color=rgbs.reshape(-1, 3),
                          rasterized=True,
                          edgecolor=ax.get_facecolor(),
                          lw=0)
        m.set_array(None)
        df = pd.DataFrame(lchs.reshape(-1, 3), columns=['l', 'c', 'h'])
        df['in'] = in_gamut.reshape(-1)
        max_c = df[df['in']].groupby('h').max()['c']
        # ax.fill_between(np.deg2rad(max_c.index), max_c.rolling(min_periods=1, window=10, center=True, win_type='blackman').mean() * 0.95, cc.max(), color=plt.rcParams['axes.facecolor'])
        ax.scatter(0, 0, color='black', s=10)
        return pn.pane.Matplotlib(fig,
                                  dpi=144,
                                  tight=True,
                                  sizing_mode='scale_both')


mod = ChromaSlicer()
app = pn.Row(pn.Param(mod.param, name=''), mod.plot)
app.servable('Chromaticity Diagram')
