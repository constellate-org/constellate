# This code is autogenerated by Constellate, and changes made here will not persist.
#constellate: setup
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
import colorcet as cc
import scipy
from sympy import *
import rho_plus

IS_DARK = True
theme, cs = rho_plus.mpl_setup(IS_DARK)

import panel as pn
import param
import bokeh
pn.extension('gridstack', sizing_mode='scale_both')
from panel.layout.gridstack import GridStack
#constellate: setup_panel

from bokeh.sampledata.iris import flowers
from rho_plus.util import labelcase
import holoviews as hv
from holoviews import opts

flowers.columns = labelcase(flowers.columns)

import holoviews as hv
import panel as pn
from holoviews import opts
from hvplot import scatter_matrix
from rho_plus.util import labelcase

pn.extension(template='fast', comms='vscode')

flowers.columns = labelcase(flowers.columns)


class IrisGrid(rho_plus.ThemedPanel):

    @pn.depends('colorMode')
    def plot(self):
        colors, theme = self.colors_theme()

        hv.Cycle.default_cycles['default_colors'] = colors

        hv.renderer('bokeh').theme = theme
        gm = scatter_matrix(flowers,
                            cmap=colors,
                            alpha=0.4,
                            diagonal='kde',
                            c='Species',
                            tools=['box_select', 'hover'],
                            size=5)
        plots = [None for _ in range(len(gm.values()))]
        n_rows = n_cols = int(np.sqrt(len(gm.values())))
        for i, ((x, y), plot) in zip(
                np.arange(len(plots)).reshape(n_rows, n_cols).T.flatten(),
                gm.items()):
            row = i // n_rows
            col = i % n_rows
            label_x = row == n_rows - 1
            label_y = col == 0
            plots[i] = plot.opts(
                responsive=True,
                show_legend=bool(i == 0),
                xlabel=x if label_x else '',
                ylabel=y if label_y else '',
            )

        gm = hv.Layout(plots).cols(n_cols)
        return pn.pane.HoloViews(gm, center=True, sizing_mode='stretch_both')


ig = IrisGrid()

pn.Row(ig.plot, sizing_mode='stretch_both', margin=(5, 5, 30, 5)).servable()
