# This code is autogenerated by Constellate, and changes made here will not persist.
#constellate: setup
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
import colorcet as cc
import scipy
from sympy import *
import rho_plus

IS_DARK = True
theme, cs = rho_plus.mpl_setup(IS_DARK)

import panel as pn
import param
import bokeh
pn.extension('gridstack', sizing_mode='scale_both')
from panel.layout.gridstack import GridStack
#constellate: setup_panel

from bokeh.sampledata.iris import flowers
from rho_plus.util import labelcase
import holoviews as hv
from holoviews import opts

flowers.columns = labelcase(flowers.columns)

class ThemedPanel(param.Parameterized):
    colorMode = param.ObjectSelector(["dark", "light"], precedence=-1)

    def __init__(self):
        super().__init__()
        if 'colorMode' in pn.state.session_args:
            self.colorMode = pn.state.session_args["colorMode"][0].decode().lower()
        else:
            self.colorMode = 'dark'

    @pn.depends("colorMode")
    def colors_theme(self):
        if self.colorMode == "light":
            plt.style.use("rho-light")
        else:
            plt.style.use("rho-dark")
        colors = plt.rcParams["axes.prop_cycle"].by_key()["color"]
        # theme = bokeh.themes.Theme(
        #     f"/home/nicholas/programs/rho-themes/themes/panel/eui/{self.colorMode}.yml"
        # )
        theme = 'caliber' if self.colorMode == 'light' else 'dark_minimal'
        return (colors, theme)

import param
from scipy import stats


class Gaussian(param.Parameterized):
    mu_x = param.Number(label='Mean petal width', default=0.2, bounds=(0, 3))
    mu_y = param.Number(label='Mean petal length', default=0.2, bounds=(0, 7))
    sigma_x = param.Number(label='Petal width standard deviation',
                           default=1,
                           bounds=(0, 2))
    sigma_y = param.Number(label='Petal length standard deviation',
                           default=1,
                           bounds=(0, 4))
    sigma_xy = param.Number(label='Petal width/length correlation',
                            default=0,
                            bounds=(-1, 1))

    @pn.depends('mu_x', 'mu_y', 'sigma_x', 'sigma_y', 'sigma_xy')
    def generate_pdf(self, xy):
        mu = np.array([self.mu_x, self.mu_y])
        sigma_cov = self.sigma_x * self.sigma_y * self.sigma_xy
        sigma = np.array([[self.sigma_x, sigma_cov], [sigma_cov,
                                                      self.sigma_y]])

        return stats.multivariate_normal(mu, sigma,
                                         allow_singular=True).pdf(xy)


class GMMTest(ThemedPanel):
    clust1 = Gaussian()
    clust2 = Gaussian()

    p1 = param.Number(label='Proportion in cluster 1',
                      default=0.5,
                      bounds=(0, 1))

    def __init__(self):
        super().__init__()
        self.clust2.mu_x = 3
        self.clust2.mu_y = 5

    @pn.depends('clust1.param', 'clust2.param', 'p1')
    def generate_pdf(self, xy):
        return self.clust1.generate_pdf(
            xy) * self.p1 + self.clust2.generate_pdf(xy) * (1 - self.p1)

    @pn.depends('clust1.param', 'clust2.param', 'p1', 'colorMode')
    def plot(self):
        colors, theme = self.colors_theme()
        hv.Cycle.default_cycles['default_colors'] = colors
        hv.renderer('bokeh').theme = theme

        xx, yy = np.mgrid[0:3.5:0.1, 0:7:0.2]
        xy = np.dstack([xx, yy])

        pdf = hv.QuadMesh((xx, yy, self.generate_pdf(xy))).opts(
            opts.QuadMesh(cmap=rho_plus.viridia.as_mpl_cmap(),
                          colorbar=True,
                          clim=(0, 0.3),
                          line_width=5,
                          xlabel='Petal Width',
                          ylabel='Petal Length'))
        points = hv.Points(flowers,
                           kdims=['Petal Width', 'Petal Length']).opts(
                               opts.Points(
                                   color='white',
                                   xlim=(np.min(xx), np.max(xx)),
                                   ylim=(np.min(yy), np.max(yy)),
                               ))
        plot = pdf * points
        return pn.pane.HoloViews(plot, sizing_mode='stretch_both')


mod = GMMTest()
obj = pn.GridSpec(sizing_mode='stretch_both')
obj[:, :1] = pn.Column(
    pn.Param(mod, sizing_mode='stretch_both', name='Cluster Size'),
    pn.Param(mod.clust1, name='Cluster 1'),
    pn.Param(mod.clust2, name='Cluster 2'))
obj[:, 1:5] = mod.plot
obj.servable()
